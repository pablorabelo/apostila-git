\newpage
\appendix

\chapter{Exemplos de rotinas}

Neste apêndice são descritas brevemente algumas das rotinas mais usuais
em projetos Git. A maioria dos exemplos estão detalhados na apostila e
foram resumidos nesta coletânea. Abaixo temos a lista de rotinas aqui
presentes.

\listofprogram

\begin{program}[H]
  \caption{Configurar usuário e e-mail localmente e globalmente.}
\end{program}
<<engine="bash", echo=TRUE, eval=FALSE>>=
## Configurando localmente
##   - válido para o repositório atual
git config user.name "Name Lastname"
git config user.email "namelastname@servidor"

## Configurando globalmente
##   - válido para todos os repositórios do computador
git config --global user.name "Name Lastname"
git config --global user.email "namelastname@servidor"

## Obs.: As configurações locais se sobrepõem as
## globais, quando as duas forem avaliadas.
@

%%----------------------------------------------------------------------

\begin{program}[H]
  \caption{Iniciar um projeto Git local.}
\end{program}
<<engine="bash", echo=TRUE, eval=FALSE>>=
## Em um diretório que deseja-se versionar

## Inicia o versionamento Git
git init

## Verifica o estado do repositório
git status

## Adicione os arquivos para receber o commit
git add file1.txt file2.R file3.txt file4.Rmd

## Registre a versão do repositório com uma mensagem
## informativa
git commit -m "Inicia repositório"

## Verifica o histórico de versões
git log
@

%%----------------------------------------------------------------------

\begin{program}[H]
  \caption{Criar chaves públicas para adicionar aos perfils em seviços
    Web.}
\end{program}
<<engine="bash", echo=TRUE, eval=FALSE>>=
## Cria uma chave pública.
ssh-keygen -t rsa -C "namelastname@servidor"

## Exibe as chaves públicas.
cat ~/.ssh/id_rsa.pub

## Adicione o conteúdo a um servidor remoto, como:
##  - git@github.com
##  - git@gitlab.com
##  - git@gitlab.c3sl.ufpr.br

## Verifica conexão com o servidor
ssh -T endereço ## endereço = git@github.com, ...

## Obs.: Todos os comandos ssh são provinientes do
## pacote de função ssh para shell, portanto para
## utilizar instale este pacote.
@

%%----------------------------------------------------------------------

\begin{program}[H]
  \caption{Criar chaves públicas e adicionar ao um servidor remoto.}
\end{program}
<<engine="bash", echo=TRUE, eval=FALSE>>=
## Cria uma chave pública na sua máquina local.
ssh-keygen -t rsa -C "namelastname@servidor"

## Exibe as chaves públicas criadas.
cat ~/.ssh/id_rsa.pub

## Exibe as chaves autorizadas da sua conta no servidor remoto.
ssh user@caporal.c3sl.ufpr.br "cat ~/.ssh/authorized_keys2"

## Insere a chave gerada final do arquivo de chaves autorizadas.
ssh user@caporal.c3sl.ufpr.br \
  "cat >> ~/.ssh/authorized_keys2" < ~/.ssh/id_rsa.pub

@

%%----------------------------------------------------------------------

\begin{program}[H]
  \caption{Inicar um repositório remoto Git em um servidor.}
\end{program}
<<engine="bash", echo=TRUE, eval=FALSE>>=
## Loga no servidor por SSH.
ssh user@caporal.c3sl.ufpr.br

## Criar um diretório para conter o projeto. Apesar do final .git
## (opcional), é um diretório, não um arquivo.
mkdir -p ~/Documentos/meu1repo.git
cd ~/Documentos/meu1repo.git

## Inicia um repositório remoto sem workspace.
git --bare init
git config --list

## Sai do servidor.
exit

## Opção 1: Na máquina local, clonar o repositório. O diretório criado
## não tem o .git no final
git clone user@macalan.c3sl.ufpr.br:~/Documentos/meu1repo.git
cd meu1repo
git status

## Opção 2: Se o repositório ja começou localmente, então apenas
## adicione o endereço do remoto.
git remote add origin \
  user@macalan.c3sl.ufpr.br:~/Documentos/meu1repo.git
git push origin master

## Exibir os endereços remotos.
git remote -v

@

%%----------------------------------------------------------------------

\begin{program}[H]
  \caption{Criar um ramo, incluir modificações e fazer o merge em
    outro.}
\end{program}
<<engine="bash", echo=TRUE, eval=FALSE>>=
## Verifica os ramos existentes
git branch
git branch -l ## Apenas os locais
git branch -r ## Apenas os remotos
git branch -a ## Todos

## Cria um ramo, para trabalho específico como:
##   - Corrigir bugs
##   - Desenvolver features
##   - Tarefas em geral
git branch bugfix

## Altera versionamento para o ramo criado
git checkout bugfix

## Adiciona as alterações que corrigem o bug
git add app.R

## Registra as alterações
git commit -m "Altera delimitadores da função"

## Retorna para o ramo principal
git checkout master

## Incorpora ao ramo principal as alterações
## realizados no ramo bugfix
git merge bugfix

## Deleta o ramo responsável pela correção do bug
git branch -d bugfix

@

%% Criar um ramo e subir as diferenças, setar upstream.

%% Baixar um ramo e criar o seu local.

%%----------------------------------------------------------------------

\begin{program}[H]
  \caption{Visualizar diferenças entre referências relativas, absolutas
    (\textit{commits}) e ramos.}
\end{program}  
<<engine="bash", echo=TRUE, eval=FALSE>>=
## -------------------------------------------
## Diferenças não commitadas

## Lista as diferenças entre o último commit e o
## estado do repositório no working directory
git diff

## Diferença para um único arquivo
git diff file.Rmd

## -------------------------------------------
## Diferenças entre versões commitadas

## Verifica os registros com referência
git reflog

## Lista as diferenças entre o último e o
## antepenúltimo registro
git diff HEAD~0 HEAD~2 ## ou pelo SHA1 ID
git diff 7204daa be1a9cc

## -------------------------------------------
## Diferenças entre ramos

## Lista diferenças entre os ramos master e
## feature1
git diff master feature1

## Obs.: Programas externos podem ser utilizados para
## visualizar diferenças, use difftool no lugar de
## diff, ver cap. 06

@

%%----------------------------------------------------------------------

\begin{program}[H]
  \caption{Resolver conflitos de merge.}
\end{program}
<<engine="bash", echo=TRUE, eval=FALSE>>=
## Incorpora modificações realizadas no ramo feature
git merge feature

## Edite e salve o(s) arquivo(s) em conflito, as
## porções em conflito são destacadas por <<< === >>>

## Finaliza merge com o commit:
git commit -a -m "Merge do ramo feature"

@

%%----------------------------------------------------------------------

\begin{program}[H]
  \caption{Visualizar o histórico de \textit{commits} do projeto.}
\end{program}
<<engine="bash", echo=TRUE, eval=FALSE>>=
## Histórico de registros
git log

## Histórico de registros em uma linha com trajetória
## dos ramos
git log --graph --oneline

## Histórico de registro com referência
git reflog

## Histórico de registro via interface gráfica padrão
gitk
gitk --all
@

%%----------------------------------------------------------------------

\begin{program}[H]
  \caption{Voltar arquivos para versões anteriores.}
\end{program}
<<engine="bash", echo=TRUE, eval=FALSE>>=
## Verifica o histórico de versões do repositório
##   - Guarde o SHA1 ID do registro desejado: ec3650c8
git log --oneline

## -------------------------------------------
## Descartar todas as alterações até um commit
git reset --hard ec3650c8

## Obs.: Reescreve a história do repositório, não
## é recomendável reescrever a linha do tempo quando
## se está em um projeto colaborativo remoto.

## -------------------------------------------
## Reverte o estado atual para um registro específico
git revert ec3650c8
git commit -am "Retorna projeto para versão funcional"

## Obs.: Faz um merge da versão atual com a versão do
## SHA1 ID informado. Podem haver conflitos que devem
## ser resolvidos para concluir a reversão.

## -------------------------------------------
## Cria um ramo provisório a partir de um SHA1 ID
git checkout ec3650c8

## Visualiza os ramos existentes
git branch

## Cria um ramo denifitivo com o estado no SHA1 ID
git checkout -b ramo_teste

## Obs.: O ramo provisório é removido assim que se
## fizer um checkout para qualquer outro ramo

@

%%----------------------------------------------------------------------

\begin{program}[H]
  \caption{Refazer o último \textit{commit} para alterar a mensagem e/ou
    incluir mais modificações.}
\end{program}
<<engine="bash", echo=TRUE, eval=FALSE>>=
## Verifica o histórico de versões do repositório
git log --oneline

## Caso seja o objetivo, adicione mais modificações.
git add script.R

## -------------------------------------------
## Reescreve a última mensagem de commit
git commit --amend -m "Correção de Commit"

## Obs1.: Arquivos na staging area também são
## incorporados ao último commit
## Obs2.: Reescreve a história do repositório, não
## é recomendável reescrever a linha do tempo quando
## se está em um projeto colaborativo remoto.
@

%%----------------------------------------------------------------------

\begin{program}[H]
  \caption{Trabalhe remotamente.}
\end{program}
<<engine="bash", echo=TRUE, eval=FALSE>>=
## Clona um projeto remoto:
## e.g. git@github.com:pet-estatistica/apostila-git.git
git clone endereço:namespace/project.git

## Realiza modificações e/ou inclusões de um ou
## vários arquivos

## Adiciona todas as alterações para commit
git add .

## Registra suas alterações
git commit -a -m "Modifica compilação do projeto"

## Envia as alterações para o repositório remoto (origin)
git push origin

## Traz estado do repositório remoto
git pull origin
@

%%----------------------------------------------------------------------

\begin{itemize}
\item asdasd
\item asdas
\item 
\end{itemize}

\begin{program}[H]
  \caption{Manipule ramos remotos.}
\end{program}
<<engine="bash", echo=TRUE, eval=FALSE>>=
## -------------------------------------------
## Realizando contribuições em um ramo remoto

## Lista todos os ramos, locais e remotos
git branch -a

## Altera versionamento para o ramo issue01
git checkout issue01

## Traz estado do ramo remoto issue01
git pull origin issue01

## Realiza modificações e/ou inclusões de um ou
## vários arquivos

## Adiciona todas as alterações para commit
git add .

## Registra suas alterações
git commit -a -m "Modifica laço iterativo condicional"

## Envia as alterações no ramo para a versão remota
git push origin issue01

## -------------------------------------------
## Realizando contribuições em um ramo remoto e
## enviando o ramo principal mesclado

## Traz estado do ramo remoto issue01
git pull origin bugfix

## Altera versionamento para o ramo issue01
git checkout bugfix

## Realiza modificações e/ou inclusões de em um ou
## vários arquivos

## Adiciona todas as alterações para commit
git add .

## Registra suas alterações
git commit -a -m "Altera classe do objeto retornado"

## Retorna ao ramo principal
git checkout master

## Incorpora modificações realizadas no ramo bugfix
git merge bugfix

## Envia as alterações ao repositório remoto
git push origin master

## Deleta o ramo bugfix
git branch -d bugfix ## Local
git push :bugfix     ## Remoto

@

%%----------------------------------------------------------------------

\begin{program}[H]
  \caption{Adicione endereço remoto.}
\end{program}
<<engine="bash", echo=TRUE, eval=FALSE>>=
## Lista os servidores remotos, com endereço
git remote -v

## -------------------------------------------
## Adicionando local para trazer contribuições

## Adiciona local remoto com nome gitlab:
git remote add gitlab git@gitlab.com:user/project.git

## Adiciona local remoto com nome github:
git remote add github git@github.com:user/project.git

## Atualiza arquivos locais, baseado no local remoto:
git pull gitlab ## gitlab.com:namespace/project.git
git pull github ## github.com:namespace/project.git

## -------------------------------------------
## Adicionando local para enviar contribuições

## Lista os locais de origem
git remote show origin

## Adiciona novo local de origem:
## e.g. git@github.com:pet-estatistica/apostila-git.git
git remote set-url origin --push --add endereço_remoto

## Envia as contribuições para os locais remotos
git push origin

@

%%----------------------------------------------------------------------

\begin{program}[H]
  \caption{Remove ramos de demanda, locais e remotos, já incorporados
    aos ramos permanentes.}
\end{program}
<<engine="bash", echo=TRUE, eval=FALSE>>=
## Listar os ramos:
git branch -l       ## Locais
git branch -r       ## Remotos
git branch -a       ## Todos
git branch --merged ## Incorporados ao atual

## Remove ramos:
git branch -d bugfix            ## Locais
git branch -dr origin/bugfix    ## Remotos
git push --delete origin bugfix ## No origin
git push origin :bugfix         ## Idem o anterior

## Remove todos os ramos LOCAIS com 'issue' no nome.
git branch -l --merged | grep "issue" | xargs -n 1 git branch -d

## Remove todos os ramos REMOTOS com 'issue' no nome.
git branch -r --merged | grep "issue" | xargs -n 1 git branch -dr

## Acima da versão 2.5.0 pode-se usar
git branch -d `git branch l --merged`
git branch -dr `git branch r --merged`

@
